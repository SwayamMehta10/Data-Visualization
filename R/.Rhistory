duplicated(iris)
class(iris$Species)
iris$Species[1:5]
library(ggplot2)
library(plotly)
library(dplyr)
head(iris, 10)
count(iris, Species)
library(DT)
new_iris <- iris %>% group_by(Species) %>% summarise(Avg_Sepal_Length = mean(Sepal.Length), SD_Sepal_Length = sd(Sepal.Length), Avg_Sepal_Width = mean(Sepal.Width), SD_Sepal_Width = sd(Sepal.Width), Avg_Petal_Length = mean(Petal.Length), SD_Petal_Length = sd(Petal.Length), Avg_Petal_Width = mean(Petal.Width), SD_Petal_Width = sd(Petal.Width))
datatable(new_iris, caption = "Mean & Standard Deviation") %>% formatRound(2:5, digits = 2)
p1 <- ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species, shape = Species)) + geom_point(size = 3) + ggtitle('Petal Length vs Sepal Length') + geom_smooth(method = 'lm')
ggplotly(p1)
library(GGally)
p2 <- ggpairs(iris, columns = 1:4, aes(color = Species)) + ggtitle("Anderson's Iris Dataset --- 3 Species")
p2
p3 <- pairs(iris[1:4], lower.panel = NULL, main = "Anderson's Iris Data -- 3 species", pch = 21, bg = c("red", "green3", "blue")[unclass(iris$Species)])
p3
p4 <- ggparcoord(data = iris, columns = 1:4, groupColumn = "Species")
ggplotly(p4)
p5 <- ggplot(data = iris, aes(x = Sepal.Length)) + geom_histogram(binwidth = 0.2, color="black", aes(fill = Species)) + xlab("Sepal Length") + ylab("Frequency") + ggtitle("Histogram of Sepal Length") + geom_vline(data = iris, aes(xintercept = mean(Sepal.Length)), linetype = "dashed", color="grey")
ggplotly(p5)
p6 <- ggplot(iris, aes(x = Sepal.Width, colour = Species, fill = Species)) + geom_density(alpha = .5) + geom_vline(aes(xintercept = mean(Sepal.Width)), linetype = "dashed", color = "grey", size = 1) + xlab("Sepal Width") + ylab("Density")
ggplotly(p6)
p7 <- ggplot(iris, aes(Species, Petal.Length, fill = Species)) + geom_boxplot() + scale_y_continuous("Petal Length", breaks = seq(0, 10, by = .5)) + labs(title = "Iris Petal Length Box Plot", x = "Species")
ggplotly(p7)
p8 <- ggplot(iris, aes(Species, Petal.Width, fill = Species)) + scale_y_continuous("Petal Width", breaks = seq(0, 10, by = .5)) + labs(title = "Iris Petal Width Violin Plot", x = "Species") + geom_violin(aes(color = Species), alpha = .75)
ggplotly(p8)
# Mean & Standard Deviation
library(DT)
new_iris <- iris %>% group_by(Species) %>% summarise(Avg_Sepal_Length = mean(Sepal.Length), SD_Sepal_Length = sd(Sepal.Length), Avg_Sepal_Width = mean(Sepal.Width), SD_Sepal_Width = sd(Sepal.Width), Avg_Petal_Length = mean(Petal.Length), SD_Petal_Length = sd(Petal.Length), Avg_Petal_Width = mean(Petal.Width), SD_Petal_Width = sd(Petal.Width))
datatable(new_iris, caption = "Mean & Standard Deviation") %>% formatRound(2:5, digits = 2)
duplicated(iris)
class(iris$Species)
iris$Species[1:5]
# Mean & Standard Deviation
library(DT)
new_iris <- iris %>% group_by(Species) %>% summarise(Avg_Sepal_Length = mean(Sepal.Length), SD_Sepal_Length = sd(Sepal.Length), Avg_Sepal_Width = mean(Sepal.Width), SD_Sepal_Width = sd(Sepal.Width), Avg_Petal_Length = mean(Petal.Length), SD_Petal_Length = sd(Petal.Length), Avg_Petal_Width = mean(Petal.Width), SD_Petal_Width = sd(Petal.Width))
datatable(new_iris, caption = "Mean & Standard Deviation") %>% formatRound(2:5, digits = 2)
library(ggplot2)
library(plotly)
library(dplyr)
head(iris, 10)
count(iris, Species)
# Scatter Plot
p1 <- ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species, shape = Species)) + geom_point(size = 3) + ggtitle('Petal Length vs Sepal Length') + geom_smooth(method = 'lm')
ggplotly(p1)
# Generalized Pair Plot
library(GGally)
p2 <- ggpairs(iris, columns = 1:4, aes(color = Species)) + ggtitle("Anderson's Iris Dataset --- 3 Species")
p2
p3 <- pairs(iris[1:4], lower.panel = NULL, main = "Anderson's Iris Data -- 3 species", pch = 21, bg = c("red", "green3", "blue")[unclass(iris$Species)])
p3
# Parallel Coordinate Plot
p4 <- ggparcoord(data = iris, columns = 1:4, groupColumn = "Species")
ggplotly(p4)
# Histogram
p5 <- ggplot(data = iris, aes(x = Sepal.Length)) + geom_histogram(binwidth = 0.2, color="black", aes(fill = Species)) + xlab("Sepal Length") + ylab("Frequency") + ggtitle("Histogram of Sepal Length") + geom_vline(data = iris, aes(xintercept = mean(Sepal.Length)), linetype = "dashed", color="grey")
ggplotly(p5)
# Density Plot
p6 <- ggplot(iris, aes(x = Sepal.Width, colour = Species, fill = Species)) + geom_density(alpha = .5) + geom_vline(aes(xintercept = mean(Sepal.Width)), linetype = "dashed", color = "grey", size = 1) + xlab("Sepal Width") + ylab("Density")
ggplotly(p6)
# Box Plot
p7 <- ggplot(iris, aes(Species, Petal.Length, fill = Species)) + geom_boxplot() + scale_y_continuous("Petal Length", breaks = seq(0, 10, by = .5)) + labs(title = "Iris Petal Length Box Plot", x = "Species")
ggplotly(p7)
# Violin Plot
p8 <- ggplot(iris, aes(Species, Petal.Width, fill = Species)) + scale_y_continuous("Petal Width", breaks = seq(0, 10, by = .5)) + labs(title = "Iris Petal Width Violin Plot", x = "Species") + geom_violin(aes(color = Species), alpha = .75)
ggplotly(p8)
library(ggplot2)
head(mpg, 10)
count(mpg)
p1 <- ggplot(mpg, aes(x = class, fill = drv)) + geom_bar(position = "stacked")
library(ggplot2)
head(mpg, 10)
count(mpg)
p1 <- ggplot(mpg, aes(x = class, fill = drv)) + geom_bar(position = "stack")
p1
library(ggplot2)
head(mpg, 10)
count(mpg, manufacturer)
p1 <- ggplot(mpg, aes(x = class, fill = drv)) + geom_bar(position = "stack")
p1
library(ggplot2)
library(plotly)
head(mpg, 10)
count(mpg, manufacturer)
p1 <- ggplot(mpg, aes(x = class, fill = drv)) + geom_bar(position = "stack")
ggplotly(p1)
library(ggplot2)
library(plotly)
head(mpg, 10)
count(mpg, manufacturer)
# Stacked Bar Chart
p1 <- ggplot(mpg, aes(x = class, fill = drv)) + geom_bar(position = "stack")
ggplotly(p1)
# Generalized Pair Plot
library(GGally)
p2 <- ggpairs(iris, columns = 1:4, aes(color = Species)) + ggtitle("Anderson's Iris Dataset --- 3 Species")
p2
p3 <- pairs(iris[1:4], lower.panel = NULL, main = "Anderson's Iris Data -- 3 species", pch = 21, bg = c("red", "green3", "blue")[unclass(iris$Species)])
# Generalized Pair Plot
library(GGally)
p2 <- ggpairs(iris, columns = 1:4, aes(color = Species)) + ggtitle("Anderson's Iris Dataset --- 3 Species")
# p2
p3 <- pairs(iris[1:4], lower.panel = NULL, main = "Anderson's Iris Data -- 3 species", pch = 21, bg = c("red", "green3", "blue")[unclass(iris$Species)])
# Generalized Pair Plot
library(GGally)
p2 <- ggpairs(iris, columns = 1:4, aes(color = Species)) + ggtitle("Anderson's Iris Dataset --- 3 Species")
p2
p3 <- pairs(iris[1:4], lower.panel = NULL, main = "Anderson's Iris Data -- 3 species", pch = 21, bg = c("red", "green3", "blue")[unclass(iris$Species)])
# Cleaning Data
# Mutate
mutate(iris, aspect_ration = Petal.Width/Petal.Length)
# Aggregate
aggregate(Sepal.Length ~ Species, data = iris, FUN = 'mean')
aggregate(Sepal.Length ~ Species, data = iris, FUN = 'length')
aggregate(Species ~ Sepal.Length, data = iris, FUN = 'length')
# Group by & Summarize
library(DT)
new_iris <- iris %>% group_by(Species) %>% summarise(Avg_Sepal_Length = mean(Sepal.Length), SD_Sepal_Length = sd(Sepal.Length), Avg_Sepal_Width = mean(Sepal.Width), SD_Sepal_Width = sd(Sepal.Width), Avg_Petal_Length = mean(Petal.Length), SD_Petal_Length = sd(Petal.Length), Avg_Petal_Width = mean(Petal.Width), SD_Petal_Width = sd(Petal.Width))
datatable(new_iris, caption = "Mean & Standard Deviation") %>% formatRound(2:5, digits = 2)
# Grouped Bar Chart
p2 <- ggplot(mpg, aes(x = class, fill = drv)) + geom_bar(position = "dodge")
ggplotly(p2)
# Grouped Bar Chart
p2 <- ggplot(mpg, aes(x = class, fill = drv)) + geom_bar(position = position_dodge(preserve = "single"))
ggplotly(p2)
# Segmented Bar Chart
p3 <- ggplot(mpg, aes(x = class, fill = drv)) + geom_bar(position = "fill") + labs(y = "Proportion")
ggplotly(p3)
# Segmented Bar Chart
library(dplyr)
plotdata <- mpg %>% group_by(class, drv) %>% summarize(n = n()) %>% mutate(pct = n/sum(n), lbl = scales::percent(pct))
plotdata
p3 <- ggplot(plotdata, aes(x = factor(class, levels = c("2seater", "subcompact", "compact", "midsize", "minivan", "suv", "pickup")), y = pct, fill = factor(drv, levels = c("f", "r", "4"), labels = c("front-wheel", "rear-wheel", "4-wheel"))))
p3 <- p3 + geom_bar(stat = "identity", position = "fill") + scale_y_continuous(breaks = seq(0, 1, .2), label = percent) + geom_text(aes(label = lbl), size = 3, position = position_stack(vjust = 0.5)) + scale_fill_brewer(palette = "Set2") + labs(y = "Percent", fill = "Drive Train", x = "Class", title = "Automobile Drive by Class") + theme_minimal()
# Segmented Bar Chart
library(dplyr)
mpg$class = factor(mpg$class, levels = c("2seater", "subcompact", "compact", "midsize", "minivan", "suv", "pickup"))
plotdata <- mpg %>% group_by(class, drv) %>% summarize(n = n()) %>% mutate(pct = n/sum(n), lbl = scales::percent(pct))
plotdata
p3 <- ggplot(plotdata, aes(x = factor(class, levels = c("2seater", "subcompact", "compact", "midsize", "minivan", "suv", "pickup")), y = pct, fill = factor(drv, levels = c("f", "r", "4"), labels = c("front-wheel", "rear-wheel", "4-wheel"))))
p3 <- p3 + geom_bar(stat = "identity", position = "fill") + scale_y_continuous(breaks = seq(0, 1, .2), label = percent) + geom_text(aes(label = lbl), size = 3, position = position_stack(vjust = 0.5)) + scale_fill_brewer(palette = "Set2") + labs(y = "Percent", fill = "Drive Train", x = "Class", title = "Automobile Drive by Class") + theme_minimal()
# Segmented Bar Chart
library(dplyr)
mpg$class = factor(mpg$class, levels = c("2seater", "subcompact", "compact", "midsize", "minivan", "suv", "pickup"))
plotdata <- mpg %>% group_by(class, drv) %>% summarize(n = n()) %>% mutate(pct = n/sum(n), lbl = scales::percent(pct))
plotdata
p3 <- ggplot(plotdata, aes(x = factor(class, levels = c("2seater", "subcompact", "compact", "midsize", "minivan", "suv", "pickup")), y = pct, fill = factor(drv, levels = c("f", "r", "4"), labels = c("front-wheel", "rear-wheel", "4-wheel"))))
p3 <- p3 + geom_bar(stat = "identity", position = "fill") + scale_y_continuous(breaks = seq(0, 1, .2), label = percent) + geom_text(aes(label = lbl), size = 3, position = position_stack(vjust = 0.5)) + scale_fill_brewer(palette = "Set2") + labs(y = "Percent", fill = "Drive Train", x = "Class", title = "Automobile Drive by Class") + theme_minimal()
# Segmented Bar Chart
library(dplyr)
library(scales)
mpg$class = factor(mpg$class, levels = c("2seater", "subcompact", "compact", "midsize", "minivan", "suv", "pickup"))
plotdata <- mpg %>% group_by(class, drv) %>% summarize(n = n()) %>% mutate(pct = n/sum(n), lbl = scales::percent(pct))
plotdata
p3 <- ggplot(plotdata, aes(x = factor(class, levels = c("2seater", "subcompact", "compact", "midsize", "minivan", "suv", "pickup")), y = pct, fill = factor(drv, levels = c("f", "r", "4"), labels = c("front-wheel", "rear-wheel", "4-wheel"))))
p3 <- p3 + geom_bar(stat = "identity", position = "fill") + scale_y_continuous(breaks = seq(0, 1, .2), label = percent) + geom_text(aes(label = lbl), size = 3, position = position_stack(vjust = 0.5)) + scale_fill_brewer(palette = "Set2") + labs(y = "Percent", fill = "Drive Train", x = "Class", title = "Automobile Drive by Class") + theme_minimal()
ggplotly(p3)
# Segmented Bar Chart
library(dplyr)
library(scales)
mpg$class = factor(mpg$class, levels = c("2seater", "subcompact", "compact", "midsize", "minivan", "suv", "pickup"))
plotdata <- mpg %>% group_by(class, drv) %>% summarize(n = n()) %>% mutate(pct = n/sum(n), lbl = scales::percent(pct))
plotdata
p3 <- ggplot(plotdata, aes(x = factor(class, levels = c("2seater", "subcompact", "compact", "midsize", "minivan", "suv", "pickup")), y = pct, fill = factor(drv, levels = c("f", "r", "4"), labels = c("front-wheel", "rear-wheel", "4-wheel"))))
p3 <- p3 + geom_bar(stat = "identity", position = "fill") + scale_y_continuous(breaks = seq(0, 1, .2), label = percent) + geom_text(aes(label = lbl), size = 3, position = position_stack(vjust = 0.5)) + scale_fill_brewer(palette = "Set2") + labs(y = "Percent", fill = "Drive Train", x = "Class", title = "Automobile Drive by Class") + theme_minimal()
p3
# Ridgeline Graph
library(ggridges)
install.packages("ggridges")
# Ridgeline Graph
library(ggridges)
p4 <- ggplot(mpg, aes(x = cty, y = class, fill = class)) + geom_density_ridges() + theme_ridges() + labs("Highway mileage by auto class")
ggplotly(p4)
# Segmented Bar Chart
library(dplyr)
library(scales)
plotdata <- mpg %>% group_by(class, drv) %>% summarize(n = n()) %>% mutate(pct = n/sum(n), lbl = scales::percent(pct))
plotdata
p3 <- ggplot(plotdata, aes(x = factor(class, levels = c("2seater", "subcompact", "compact", "midsize", "minivan", "suv", "pickup")), y = pct, fill = factor(drv, levels = c("f", "r", "4"), labels = c("front-wheel", "rear-wheel", "4-wheel"))))
p3 <- p3 + geom_bar(stat = "identity", position = "fill") + scale_y_continuous(breaks = seq(0, 1, .2), label = percent) + geom_text(aes(label = lbl), size = 3, position = position_stack(vjust = 0.5)) + scale_fill_brewer(palette = "Set2") + labs(y = "Percent", fill = "Drive Train", x = "Class", title = "Automobile Drive by Class") + theme_minimal()
p3
# Ridgeline Graph
library(ggridges)
p4 <- ggplot(mpg, aes(x = cty, y = class, fill = class)) + geom_density_ridges() + theme_ridges() + labs("Highway mileage by auto class")
ggplotly(p4)
# Ridgeline Graph
library(ggridges)
p4 <- ggplot(mpg, aes(x = cty, y = class, fill = class)) + geom_density_ridges() + theme_ridges() + labs("Highway mileage by auto class")
p4
# Ridgeline Graph
library(ggridges)
p4 <- ggplot(mpg, aes(x = cty, y = class, fill = class)) + geom_density_ridges() + theme_ridges() + labs(title = "Highway mileage by auto class")
p4
# Scatter Plot
p5 <- ggplot(mpg, aes(x = displ, y = hwy, fill = class)) + geom_point(size = 5) + labs(title = "Displacement by Highway Mileage") + theme_minimal()
ggplotly(p5)
# Scatter Plot
p5 <- ggplot(mpg, aes(x = displ, y = hwy, fill = class)) + geom_point(size = 5) + labs(title = "Displacement by Highway Mileage") + theme_minimal()
p5
# Scatter Plot
p5 <- ggplot(mpg, aes(x = displ, y = hwy, color = class)) + geom_point(size = 5) + labs(title = "Displacement by Highway Mileage") + theme_minimal()
p5
# Scatter Plot
p5 <- ggplot(mpg, aes(x = displ, y = hwy, color = class)) + geom_point(size = 5) + labs(title = "Displacement by Highway Mileage") + theme_minimal()
ggplotly(p5)
# Scatter Plot
p5 <- ggplot(mpg, aes(x = displ, y = hwy, color = class, size = year)) + geom_point(size = 5) + labs(title = "Displacement by Highway Mileage") + theme_minimal()
ggplotly(p5)
# Scatter Plot
p5 <- ggplot(mpg, aes(x = displ, y = hwy, color = class, shape = factor(year))) + geom_point(size = 5) + labs(title = "Displacement by Highway Mileage") + theme_minimal()
ggplotly(p5)
# Scatter Plot
p5 <- ggplot(mpg, aes(x = displ, y = hwy, color = class, shape = factor(year))) + geom_point(size = 3, alpha = .75) + labs(title = "Displacement by Highway Mileage", x = "Displacement (litres)", y = "Highway Miles per gallon") + theme_minimal()
ggplotly(p5)
# Grouped Bar Chart
p2 <- ggplot(mpg, aes(x = class, fill = drv)) + geom_bar(position = position_dodge(preserve = "single")) + gghighlight(class = "midsize")
install.packages("gghighlight")
# Grouped Bar Chart
library(gghighlight)
p2 <- ggplot(mpg, aes(x = class, fill = drv)) + geom_bar(position = position_dodge(preserve = "single")) + gghighlight(class = "midsize")
# Grouped Bar Chart
library(gghighlight)
p2 <- ggplot(mpg, aes(x = class, fill = drv)) + geom_bar(position = position_dodge(preserve = "single")) + gghighlight(class == "midsize")
ggplotly(p2)
# Grouped Bar Chart
library(gghighlight)
p2 <- ggplot(mpg, aes(x = class, fill = drv)) + geom_bar(position = position_dodge(preserve = "single"))
ggplotly(p2)
# Grouped Bar Chart
library(gghighlight)
p2 <- ggplot(mpg, aes(x = class, fill = drv)) + geom_bar(position = position_dodge(preserve = "single")) + gghighlight(class = "subcompact")
# Grouped Bar Chart
library(gghighlight)
p2 <- ggplot(mpg, aes(x = class, fill = drv)) + geom_bar(position = position_dodge(preserve = "single")) + gghighlight(class == "subcompact")
ggplotly(p2)
# Grouped Bar Chart
p2 <- ggplot(mpg, aes(x = class, fill = drv)) + geom_bar(position = position_dodge(preserve = "single"))
ggplotly(p2)
# Ridgeline Graph
library(ggridges)
p4 <- ggplot(mpg, aes(x = cty, y = class, fill = class)) + geom_density_ridges() + theme_ridges() + labs(title = "City mileage by auto class")
p4
# Scatter Plot
p5 <- ggplot(mpg, aes(x = displ, y = hwy, color = class, shape = factor(year))) + geom_point(size = 3, alpha = .75) + labs(title = "Displacement by Highway Mileage", x = "Displacement (litres)", y = "Highway Miles per gallon") + theme_minimal() + geom_hline(yintercept = mean(mpg$hwy), color = "darkred", linetype = "dashed") + ggplot::annotate("text", label = "Mean", color = "darkred")
# Scatter Plot
p5 <- ggplot(mpg, aes(x = displ, y = hwy, color = class, shape = factor(year))) + geom_point(size = 3, alpha = .75) + labs(title = "Displacement by Highway Mileage", x = "Displacement (litres)", y = "Highway Miles per gallon") + theme_minimal() + geom_hline(yintercept = mean(mpg$hwy), color = "darkred", linetype = "dashed") + ggplot2::annotate("text", label = "Mean", color = "darkred")
ggplotly(p5)
# Scatter Plot
p5 <- ggplot(mpg, aes(x = displ, y = hwy, color = class, shape = year)) + geom_point(size = 3, alpha = .75) + labs(title = "Displacement by Highway Mileage", x = "Displacement (litres)", y = "Highway Miles per gallon") + theme_minimal() + geom_hline(yintercept = mean(mpg$hwy), color = "darkred", linetype = "dashed") + ggplot2::annotate("text", label = "Mean", color = "darkred")
ggplotly(p5)
# Scatter Plot
p5 <- ggplot(mpg, aes(x = displ, y = hwy, color = class, shape = factor(year))) + geom_point(size = 3, alpha = .75) + labs(title = "Displacement by Highway Mileage", x = "Displacement (litres)", y = "Highway Miles per gallon") + theme_minimal() + geom_hline(yintercept = mean(mpg$hwy), color = "darkred", linetype = "dashed") + ggplot2::annotate("text", label = "Mean", color = "darkred")
ggplotly(p5)
# Scatter Plot
mean_hwy = mean(mpg$hwy)
p5 <- ggplot(mpg, aes(x = displ, y = hwy, color = class, shape = factor(year))) + geom_point(size = 3, alpha = .75) + labs(title = "Displacement by Highway Mileage", x = "Displacement (litres)", y = "Highway Miles per gallon") + theme_minimal() + geom_hline(yintercept = mean_hwy, color = "darkred", linetype = "dashed") + ggplot2::annotate("text", mean_hwy + 1, label = "Mean", color = "darkred")
ggplotly(p5)
# Scatter Plot
mean_hwy = mean(mpg$hwy)
min_displ = min(mpg$displ)
p5 <- ggplot(mpg, aes(x = displ, y = hwy, color = class, shape = factor(year))) + geom_point(size = 3, alpha = .75) + labs(title = "Displacement by Highway Mileage", x = "Displacement (litres)", y = "Highway Miles per gallon") + theme_minimal() + geom_hline(yintercept = mean_hwy, color = "darkred", linetype = "dashed") + ggplot2::annotate("text", min_displ, mean_hwy + 1, label = "Mean", color = "darkred")
ggplotly(p5)
# Scatter Plot
mean_hwy = mean(mpg$hwy)
min_displ = min(mpg$displ)
p5 <- ggplot(mpg, aes(x = displ, y = hwy, color = class, shape = factor(year))) + geom_point(size = 3, alpha = .75) + labs(title = "Displacement by Highway Mileage", x = "Displacement (litres)", y = "Highway Miles per gallon") + theme_minimal() + geom_hline(yintercept = mean_hwy, color = "darkred", linetype = "dashed") + ggplot2::annotate("text", min_displ, mean_hwy - 1, label = "Mean", color = "darkred")
ggplotly(p5)
library(ggplot2)
library(plotly)
head(mpg, 10)
desc(mpg)
library(ggplot2)
library(plotly)
head(mpg, 10)
count(mpg, manufacturer)
# Stacked Bar Chart
p1 <- ggplot(mpg, aes(x = class, fill = drv)) + geom_bar(position = "stack")
ggplotly(p1)
# Scatter Plot
mean_hwy = mean(mpg$hwy)
min_displ = min(mpg$displ)
p5 <- ggplot(mpg, aes(x = displ, y = hwy, color = class, shape = factor(year))) + geom_point(size = 3, alpha = .75) + labs(title = "Displacement by Highway Mileage", x = "Engine Displacement (litres)", y = "Highway Miles per gallon") + theme_minimal() + geom_hline(yintercept = mean_hwy, color = "darkred", linetype = "dashed") + ggplot2::annotate("text", min_displ, mean_hwy - 1, label = "Mean", color = "darkred")
ggplotly(p5)
# Scatter Plot
mean_hwy = mean(mpg$hwy)
mean_displ = mean(mpg$displ)
max_hwy = max(mpg$hwy)
min_displ = min(mpg$displ)
p5 <- ggplot(mpg, aes(x = displ, y = hwy, color = class, shape = factor(year))) + geom_point(size = 3, alpha = .75) + labs(title = "Displacement by Highway Mileage", x = "Engine Displacement (litres)", y = "Highway Miles per gallon") + theme_minimal()
p5 <- p5 + geom_hline(yintercept = mean_hwy, color = "darkred", linetype = "dashed") + ggplot2::annotate("text", min_displ, mean_hwy - 1, label = "Mean", color = "darkred") + geom_vline(xintercept = mean_displ, color = "darkred", linetype = "dashed") + ggplot2::annotate("text", max_hwy, mean_displ - 1, label = "Mean", color = "darkred")
ggplotly(p5)
# Scatter Plot
mean_hwy = mean(mpg$hwy)
mean_displ = mean(mpg$displ)
max_hwy = max(mpg$hwy)
min_displ = min(mpg$displ)
p5 <- ggplot(mpg, aes(x = displ, y = hwy, color = class, shape = factor(year))) + geom_point(size = 3, alpha = .75) + labs(title = "Displacement by Highway Mileage", x = "Engine Displacement (litres)", y = "Highway Miles per gallon") + theme_minimal()
p5 <- p5 + geom_hline(yintercept = mean_hwy, color = "darkred", linetype = "dashed") + ggplot2::annotate("text", min_displ, mean_hwy - 1, label = "Mean", color = "darkred") + geom_vline(xintercept = mean_displ, color = "darkred", linetype = "dashed") + ggplot2::annotate("text", mean_displ - 1, max_hwy, label = "Mean", color = "darkred")
ggplotly(p5)
# Scatter Plot
mean_hwy = mean(mpg$hwy)
mean_displ = mean(mpg$displ)
max_hwy = max(mpg$hwy)
min_displ = min(mpg$displ)
p5 <- ggplot(mpg, aes(x = displ, y = hwy, color = class, shape = factor(year))) + geom_point(size = 3, alpha = .75) + labs(title = "Displacement by Highway Mileage", x = "Engine Displacement (litres)", y = "Highway Miles per gallon") + theme_minimal()
p5 <- p5 + geom_hline(yintercept = mean_hwy, color = "darkred", linetype = "dashed") + ggplot2::annotate("text", min_displ, mean_hwy - 1, label = "Mean", color = "darkred") + geom_vline(xintercept = mean_displ, color = "darkred", linetype = "dashed") + ggplot2::annotate("text", mean_displ, max_hwy, label = "Mean", color = "darkred")
ggplotly(p5)
# Scatter Plot
mean_hwy = mean(mpg$hwy)
mean_displ = mean(mpg$displ)
max_hwy = max(mpg$hwy)
min_displ = min(mpg$displ)
p5 <- ggplot(mpg, aes(x = displ, y = hwy, color = class, shape = factor(year))) + geom_point(size = 3, alpha = .75) + labs(title = "Displacement by Highway Mileage", x = "Engine Displacement (litres)", y = "Highway Miles per gallon") + theme_minimal()
p5 <- p5 + geom_hline(yintercept = mean_hwy, color = "darkred", linetype = "dashed") + ggplot2::annotate("text", min_displ, mean_hwy - 1, label = "Mean", color = "darkred") + geom_vline(xintercept = mean_displ, color = "darkred", linetype = "dashed") + ggplot2::annotate("text", mean_displ - .5, max_hwy, label = "Mean", color = "darkred")
ggplotly(p5)
# Scatter Plot
mean_hwy = mean(mpg$hwy)
mean_displ = mean(mpg$displ)
max_hwy = max(mpg$hwy)
min_displ = min(mpg$displ)
p5 <- ggplot(mpg, aes(x = displ, y = hwy, color = class, shape = factor(year))) + geom_point(size = 3, alpha = .75) + labs(title = "Displacement by Highway Mileage", x = "Engine Displacement (litres)", y = "Highway Miles per gallon") + theme_minimal()
p5 <- p5 + geom_hline(yintercept = mean_hwy, color = "darkred", linetype = "dashed") + ggplot2::annotate("text", min_displ, mean_hwy - 1, label = "Mean", color = "darkred") + geom_vline(xintercept = mean_displ, color = "darkred", linetype = "dashed") + ggplot2::annotate("text", mean_displ - .25, max_hwy, label = "Mean", color = "darkred")
ggplotly(p5)
